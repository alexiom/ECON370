}
#b_iv = Vectorize(b_i,vectorize.args = "v")
for(sim in 1:Nsim){
vs = rexp(N,rate=lambda)
vss = sort(vs)
vswin_SP[sim] = max(vs)
vswin_FP[sim] = max(vs)
rev_SP[sim] = vss[N-1]
rev_FP[sim] = b_i(max(vs),N-1,pexp,rate=lambda)
}
mean(rev_SP)
mean(rev_FP)
N = 5
Nsim = 100000
lambda = 1/2
rev_FP = rep(0,Nsim)
rev_SP = rep(0,Nsim)
vswin_FP = rep(0,Nsim)
vswin_SP = rep(0,Nsim)
b_i = function(v,n,Fv,...){
f = function(x){Fv(x,...)^n}
numer    = integrate(f,-Inf,v)[[1]]
denom    = f(v)
bidshave = numer/denom
if(denom == 0){
v
}else{
v - bidshave
}
}
#b_iv = Vectorize(b_i,vectorize.args = "v")
for(sim in 1:Nsim){
vs = rexp(N,rate=lambda)
vss = sort(vs)
vswin_SP[sim] = max(vs)
vswin_FP[sim] = max(vs)
rev_SP[sim] = vss[N-1]
rev_FP[sim] = b_i(max(vs),N-1,pexp,rate=lambda)
}
c(mean(rev_SP),mean(rev_FP))
N = 5
Nsim = 100000
lambda = 1/2
rev_FP = rep(0,Nsim)
rev_SP = rep(0,Nsim)
vswin_FP = rep(0,Nsim)
vswin_SP = rep(0,Nsim)
b_i = function(v,n,Fv,...){
f = function(x){Fv(x,...)^n}
numer    = integrate(f,-Inf,v)[[1]]
denom    = f(v)
bidshave = numer/denom
if(denom == 0){
v
}else{
v - bidshave
}
}
#b_iv = Vectorize(b_i,vectorize.args = "v")
for(sim in 1:Nsim){
vs = rexp(N,rate=lambda)
vss = sort(vs)
vswin_SP[sim] = max(vs)
vswin_FP[sim] = max(vs)
rev_SP[sim] = vss[N-1]
rev_FP[sim] = b_i(max(vs),N-1,pexp,rate=lambda)
}
c(mean(rev_SP),mean(rev_FP))
N = 5
Nsim = 100000
lambda = 1/10
rev_FP = rep(0,Nsim)
rev_SP = rep(0,Nsim)
vswin_FP = rep(0,Nsim)
vswin_SP = rep(0,Nsim)
b_i = function(v,n,Fv,...){
f = function(x){Fv(x,...)^n}
numer    = integrate(f,-Inf,v)[[1]]
denom    = f(v)
bidshave = numer/denom
if(denom == 0){
v
}else{
v - bidshave
}
}
#b_iv = Vectorize(b_i,vectorize.args = "v")
for(sim in 1:Nsim){
vs = rexp(N,rate=lambda)
vss = sort(vs)
vswin_SP[sim] = max(vs)
vswin_FP[sim] = max(vs)
rev_SP[sim] = vss[N-1]
rev_FP[sim] = b_i(max(vs),N-1,pexp,rate=lambda)
}
c(mean(rev_SP),mean(rev_FP))
N      = 2
Nsim   = 100000
lambda = 1/10
rev_FP   = rep(0,Nsim)
rev_SP   = rep(0,Nsim)
vswin_FP = rep(0,Nsim)
vswin_SP = rep(0,Nsim)
b_i = function(v,n,Fv,...){
f = function(x){Fv(x,...)^n}
numer    = integrate(f,-Inf,v)[[1]]
denom    = f(v)
bidshave = numer/denom
if(denom == 0){
v
}else{
v - bidshave
}
}
#b_iv = Vectorize(b_i,vectorize.args = "v")
for(sim in 1:Nsim){
vs = rexp(N,rate=lambda)
vss = sort(vs)
vswin_SP[sim] = max(vs)
vswin_FP[sim] = max(vs)
rev_SP[sim] = vss[N-1]
rev_FP[sim] = b_i(max(vs),N-1,pexp,rate=lambda)
}
c(mean(rev_SP),mean(rev_FP))
N      = 2
Nsim   = 100000
lambda = 1/10
rev_FP   = rep(0,Nsim)
rev_SP   = rep(0,Nsim)
vswin_FP = rep(0,Nsim)
vswin_SP = rep(0,Nsim)
b_i = function(v,n,Fv,...){
f = function(x){Fv(x,...)^(n-1)}
numer    = integrate(f,-Inf,v)[[1]]
denom    = f(v)
bidshave = numer/denom
if(denom == 0){
v
}else{
v - bidshave
}
}
#b_iv = Vectorize(b_i,vectorize.args = "v")
for(sim in 1:Nsim){
vs = rexp(N,rate=lambda)
vss = sort(vs)
vswin_SP[sim] = max(vs)
vswin_FP[sim] = max(vs)
rev_SP[sim] = vss[N-1]
rev_FP[sim] = b_i(max(vs),N,pexp,rate=lambda)
}
c(mean(rev_SP),mean(rev_FP))
library(swirl)
swirl()
version$version.string
RStudio.Version()$version
data(mtcars)
mtcars
lm(mpg ~ wt, data = mtcars)
fit = lm(mpg ~ wt, data = mtcars)
fit
summary(fit)
names(fit)
################################################################################
# Title: Create Simple Optimal Targeting Example Plots                         #
# Author: Alex Marsh                                                           #
# Date: May 16, 2022                                                           #
# Notes: Requires the following packages - ggplot2, latex2exp                  #
################################################################################
#==============================================================================#
#                           Script Preparation                                 #
#==============================================================================#
#------------------------------------------------------------------------------#
#                              Library packages                                #
#------------------------------------------------------------------------------#
library(ggplot2)
library(latex2exp)
#------------------------------------------------------------------------------#
#                   Set Global Variables and Parameters                        #
#------------------------------------------------------------------------------#
## ---- Set filepaths
ECON370 = "/Users/alexmarsh/Documents/School/Teaching/ECON370/" # set 370 dir
figdir   = paste0(ECON370,"Examples/")                          # set fig dir
## ---- Create Shorter TeX function
TeXc = function(txt) TeX(txt,output = "character")
## ---- Set figure parameters
res    = 400   # set figure resolution
inch   = 4     # set figure width and height (ASSUMED SQUARE or w = h)
tabsz  = 4     # set configuration text size
equsz  = tabsz # set equation annotation text size
rmnsz  = 5     # set roman numeral annotation text size
## ---- Set Equation Annotation LaTeX
LHS     = "\\bar{\\beta}(\\alpha) "                   # set LHS of equ
RHS_Con = " \\frac{\\Delta \\Pi}{p (1-\\delta)}"      # set constant for equ
RHS_Sl  = "\\frac{ \\delta}{1- \\delta} \\; \\alpha"  # set slope for equ
BForm   = paste0("$",LHS,"=",RHS_Con,"+",RHS_Sl,"$")  # paste equ together
LineTeX = TeXc(BForm)                                 # create equ LaTeX code
## ---- Set parameters For Plot
p_i   = 200  # set price
Delpi = 70   # set Delta Pi
delta = 0.2  # set delta
#==============================================================================#
#                         Calculate Values for Plot                            #
#==============================================================================#
## ---- Create Indifference Line Points
a  = Delpi/((1-delta)*p_i)  # set indifference equation intercept
b  = delta/(1-delta)        # set indifference equation slope
x1 = 0                      # set first x value
y1 = a+b*x1                 # set first y value
x2 = (1-a)/(1+b)            # set end x value
y2 = a+b*x2                 # set end y value
## ---- Create Target Group Area Data
PolyData = data.frame(
Target = c(rep("Yes",3),rep("No",4)), # targeting group ids
"x"    = c(0,0,x2,0,0,x2,1),          # x values
"y"    = c(y1,1,y2,0,y1,y2,0)         # y values
)
PolyCols = alpha("#4B9CD3",c(0.875,0.125))
names(PolyCols) = c("Yes","No")
#==============================================================================#
#                                 Create Plot                                  #
#==============================================================================#
## ---- Loop Over Values of LEGEND
for(LEGEND in c(T,F)){
## ---- Create Plot
TargetPlot = ggplot() +
# Create 2D Simplex
geom_segment(aes(x = 0, y = 1, xend = 1, yend = 0)) +
geom_segment(aes(x = 0, y = 0, xend = 1, yend = 0)) +
geom_segment(aes(x = 0, y = 0, xend = 0, yend = 1)) +
# Create Dotted Line for Indifference Line
geom_segment(aes(x=x1, y=y1, xend=x2, yend=y2), linetype="longdash") +
# Create Shaded Polynimal Locations for Targeting Groups
geom_polygon(data = PolyData,aes(x = x, y = y,fill=Target)) +
scale_fill_manual(values=PolyCols) +
# Add Equation Annotation to Plot
annotate("text", label=LineTeX, x=0.75, y=0.62, parse=T, size=equsz)
## ---- If no legend, add annotation for Target and Don't Target
if(!LEGEND){
TargetPlot = TargetPlot +
# Add Targeting Annotations
annotate("text",label="Target", x=0.15, y=0.65, size=equsz) +
annotate("text",label="Don't Target", x=0.4, y=0.28, size=equsz)
}
## ---- Format Plot Theme To Be Blank
TargetPlot = TargetPlot +
# Set Values of x and y axis ticks
scale_x_continuous(breaks = seq(0,1,0.1), limits = c(0,1)) +
scale_y_continuous(breaks = seq(0,1,0.1), limits = c(0,1)) +
xlab(TeX("$\\alpha$")) + ylab(TeX("$\\beta$")) +
# Format Plot to be Blank
theme_minimal() +
theme(panel.background = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
axis.text.y = element_text(margin = margin(r = -0.25,unit="cm")),
axis.text.x = element_text(margin = margin(t = -0.25,unit="cm")),
legend.position = if(LEGEND) c(0.63,0.8) else "No"
)
## ---- Set File Name for Configuration
fname = paste0(figdir,"TargetingPlotSimple")
fname = paste0(fname,if(LEGEND) "" else "No","Legend.png")
## ---- Save Figure as png
png(fname,width = inch,height = inch,units="in",res=res)
print(TargetPlot)
dev.off()
}
################################################################################
# Title: Create Simple Optimal Targeting Example Plots                         #
# Author: Alex Marsh                                                           #
# Date: May 16, 2022                                                           #
# Notes: Requires the following packages - ggplot2, latex2exp                  #
################################################################################
#==============================================================================#
#                           Script Preparation                                 #
#==============================================================================#
#------------------------------------------------------------------------------#
#                              Library packages                                #
#------------------------------------------------------------------------------#
library(ggplot2)
library(latex2exp)
#------------------------------------------------------------------------------#
#                   Set Global Variables and Parameters                        #
#------------------------------------------------------------------------------#
## ---- Set filepaths
ECON370 = "/Users/alexmarsh/Documents/School/Teaching/ECON370/" # set 370 dir
figdir   = paste0(ECON370,"Examples/")                          # set fig dir
## ---- Create Shorter TeX function
TeXc = function(txt) TeX(txt,output = "character")
## ---- Set figure parameters
res    = 400   # set figure resolution
inch   = 4     # set figure width and height (ASSUMED SQUARE or w = h)
tabsz  = 4     # set configuration text size
equsz  = tabsz # set equation annotation text size
rmnsz  = 5     # set roman numeral annotation text size
## ---- Set Equation Annotation LaTeX
LHS     = "\\bar{\\beta}(\\alpha) "                   # set LHS of equ
RHS_Con = " \\frac{\\Delta \\Pi}{p (1-\\delta)}"      # set constant for equ
RHS_Sl  = "\\frac{ \\delta}{1- \\delta} \\; \\alpha"  # set slope for equ
BForm   = paste0("$",LHS,"=",RHS_Con,"+",RHS_Sl,"$")  # paste equ together
LineTeX = TeXc(BForm)                                 # create equ LaTeX code
## ---- Set parameters For Plot
p_i   = 200  # set price
Delpi = 70   # set Delta Pi
delta = 0.2  # set delta
#==============================================================================#
#                         Calculate Values for Plot                            #
#==============================================================================#
## ---- Create Indifference Line Points
a  = Delpi/((1-delta)*p_i)  # set indifference equation intercept
b  = delta/(1-delta)        # set indifference equation slope
x1 = 0                      # set first x value
y1 = a+b*x1                 # set first y value
x2 = (1-a)/(1+b)            # set end x value
y2 = a+b*x2                 # set end y value
## ---- Create Target Group Area Data
PolyData = data.frame(
Target = c(rep("Yes",3),rep("No",4)), # targeting group ids
"x"    = c(0,0,x2,0,0,x2,1),          # x values
"y"    = c(y1,1,y2,0,y1,y2,0)         # y values
)
PolyCols = alpha("#4B9CD3",c(0.875,0.125))
names(PolyCols) = c("Yes","No")
LEGENG = FALSE
################################################################################
# Title: Create Simple Optimal Targeting Example Plots                         #
# Author: Alex Marsh                                                           #
# Date: May 16, 2022                                                           #
# Notes: Requires the following packages - ggplot2, latex2exp                  #
################################################################################
#==============================================================================#
#                           Script Preparation                                 #
#==============================================================================#
#------------------------------------------------------------------------------#
#                              Library packages                                #
#------------------------------------------------------------------------------#
library(ggplot2)
library(latex2exp)
#------------------------------------------------------------------------------#
#                   Set Global Variables and Parameters                        #
#------------------------------------------------------------------------------#
## ---- Set filepaths
ECON370 = "/Users/alexmarsh/Documents/School/Teaching/ECON370/" # set 370 dir
figdir   = paste0(ECON370,"Examples/")                          # set fig dir
## ---- Create Shorter TeX function
TeXc = function(txt) TeX(txt,output = "character")
## ---- Set figure parameters
res    = 400   # set figure resolution
inch   = 4     # set figure width and height (ASSUMED SQUARE or w = h)
tabsz  = 4     # set configuration text size
equsz  = tabsz # set equation annotation text size
rmnsz  = 5     # set roman numeral annotation text size
## ---- Set Equation Annotation LaTeX
LHS     = "\\bar{\\beta}(\\alpha) "                   # set LHS of equ
RHS_Con = " \\frac{\\Delta \\Pi}{p (1-\\delta)}"      # set constant for equ
RHS_Sl  = "\\frac{ \\delta}{1- \\delta} \\; \\alpha"  # set slope for equ
BForm   = paste0("$",LHS,"=",RHS_Con,"+",RHS_Sl,"$")  # paste equ together
LineTeX = TeXc(BForm)                                 # create equ LaTeX code
## ---- Set parameters For Plot
p_i   = 200  # set price
Delpi = 70   # set Delta Pi
delta = 0.2  # set delta
#==============================================================================#
#                         Calculate Values for Plot                            #
#==============================================================================#
## ---- Create Indifference Line Points
a  = Delpi/((1-delta)*p_i)  # set indifference equation intercept
b  = delta/(1-delta)        # set indifference equation slope
x1 = 0                      # set first x value
y1 = a+b*x1                 # set first y value
x2 = (1-a)/(1+b)            # set end x value
y2 = a+b*x2                 # set end y value
## ---- Create Target Group Area Data
PolyData = data.frame(
Target = c(rep("Yes",3),rep("No",4)), # targeting group ids
"x"    = c(0,0,x2,0,0,x2,1),          # x values
"y"    = c(y1,1,y2,0,y1,y2,0)         # y values
)
PolyCols = alpha("#4B9CD3",c(0.875,0.125))
names(PolyCols) = c("Yes","No")
#==============================================================================#
#                                 Create Plot                                  #
#==============================================================================#
## ---- Create Plot
TargetPlot = ggplot() +
# Create 2D Simplex
geom_segment(aes(x = 0, y = 1, xend = 1, yend = 0)) +
geom_segment(aes(x = 0, y = 0, xend = 1, yend = 0)) +
geom_segment(aes(x = 0, y = 0, xend = 0, yend = 1)) +
# Create Dotted Line for Indifference Line
geom_segment(aes(x=x1, y=y1, xend=x2, yend=y2), linetype="longdash") +
# Create Shaded Polynimal Locations for Targeting Groups
geom_polygon(data = PolyData,aes(x = x, y = y,fill=Target)) +
scale_fill_manual(values=PolyCols) +
# Add Equation Annotation to Plot
annotate("text", label=LineTeX, x=0.75, y=0.62, parse=T, size=equsz)
## ---- If no legend, add annotation for Target and Don't Target\
TargetPlot = TargetPlot +
# Add Targeting Annotations
annotate("text",label="Target", x=0.15, y=0.65, size=equsz) +
annotate("text",label="Don't Target", x=0.4, y=0.28, size=equsz)
## ---- Format Plot Theme To Be Blank
TargetPlot = TargetPlot +
# Set Values of x and y axis ticks
scale_x_continuous(breaks = seq(0,1,0.1), limits = c(0,1)) +
scale_y_continuous(breaks = seq(0,1,0.1), limits = c(0,1)) +
xlab(TeX("$\\alpha$")) + ylab(TeX("$\\beta$")) +
# Format Plot to be Blank
theme_minimal() +
theme(panel.background = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
axis.text.y = element_text(margin = margin(r = -0.25,unit="cm")),
axis.text.x = element_text(margin = margin(t = -0.25,unit="cm")),
legend.position = if(LEGEND) c(0.63,0.8) else "No"
)
LEGEND=FALSE
################################################################################
# Title: Create Simple Optimal Targeting Example Plots                         #
# Author: Alex Marsh                                                           #
# Date: May 16, 2022                                                           #
# Notes: Requires the following packages - ggplot2, latex2exp                  #
################################################################################
#==============================================================================#
#                           Script Preparation                                 #
#==============================================================================#
#------------------------------------------------------------------------------#
#                              Library packages                                #
#------------------------------------------------------------------------------#
library(ggplot2)
library(latex2exp)
#------------------------------------------------------------------------------#
#                   Set Global Variables and Parameters                        #
#------------------------------------------------------------------------------#
## ---- Set filepaths
ECON370 = "/Users/alexmarsh/Documents/School/Teaching/ECON370/" # set 370 dir
figdir   = paste0(ECON370,"Examples/")                          # set fig dir
## ---- Create Shorter TeX function
TeXc = function(txt) TeX(txt,output = "character")
## ---- Set figure parameters
res    = 400   # set figure resolution
inch   = 4     # set figure width and height (ASSUMED SQUARE or w = h)
tabsz  = 4     # set configuration text size
equsz  = tabsz # set equation annotation text size
rmnsz  = 5     # set roman numeral annotation text size
## ---- Set Equation Annotation LaTeX
LHS     = "\\bar{\\beta}(\\alpha) "                   # set LHS of equ
RHS_Con = " \\frac{\\Delta \\Pi}{p (1-\\delta)}"      # set constant for equ
RHS_Sl  = "\\frac{ \\delta}{1- \\delta} \\; \\alpha"  # set slope for equ
BForm   = paste0("$",LHS,"=",RHS_Con,"+",RHS_Sl,"$")  # paste equ together
LineTeX = TeXc(BForm)                                 # create equ LaTeX code
## ---- Set parameters For Plot
p_i   = 200  # set price
Delpi = 70   # set Delta Pi
delta = 0.2  # set delta
#==============================================================================#
#                         Calculate Values for Plot                            #
#==============================================================================#
## ---- Create Indifference Line Points
a  = Delpi/((1-delta)*p_i)  # set indifference equation intercept
b  = delta/(1-delta)        # set indifference equation slope
x1 = 0                      # set first x value
y1 = a+b*x1                 # set first y value
x2 = (1-a)/(1+b)            # set end x value
y2 = a+b*x2                 # set end y value
## ---- Create Target Group Area Data
PolyData = data.frame(
Target = c(rep("Yes",3),rep("No",4)), # targeting group ids
"x"    = c(0,0,x2,0,0,x2,1),          # x values
"y"    = c(y1,1,y2,0,y1,y2,0)         # y values
)
PolyCols = alpha("#4B9CD3",c(0.875,0.125))
names(PolyCols) = c("Yes","No")
#==============================================================================#
#                                 Create Plot                                  #
#==============================================================================#
## ---- Create Plot
TargetPlot = ggplot() +
# Create 2D Simplex
geom_segment(aes(x = 0, y = 1, xend = 1, yend = 0)) +
geom_segment(aes(x = 0, y = 0, xend = 1, yend = 0)) +
geom_segment(aes(x = 0, y = 0, xend = 0, yend = 1)) +
# Create Dotted Line for Indifference Line
geom_segment(aes(x=x1, y=y1, xend=x2, yend=y2), linetype="longdash") +
# Create Shaded Polynimal Locations for Targeting Groups
geom_polygon(data = PolyData,aes(x = x, y = y,fill=Target)) +
scale_fill_manual(values=PolyCols) +
# Add Equation Annotation to Plot
annotate("text", label=LineTeX, x=0.75, y=0.62, parse=T, size=equsz)
## ---- If no legend, add annotation for Target and Don't Target\
TargetPlot = TargetPlot +
# Add Targeting Annotations
annotate("text",label="Target", x=0.15, y=0.65, size=equsz) +
annotate("text",label="Don't Target", x=0.4, y=0.28, size=equsz)
## ---- Format Plot Theme To Be Blank
TargetPlot = TargetPlot +
# Set Values of x and y axis ticks
scale_x_continuous(breaks = seq(0,1,0.1), limits = c(0,1)) +
scale_y_continuous(breaks = seq(0,1,0.1), limits = c(0,1)) +
xlab(TeX("$\\alpha$")) + ylab(TeX("$\\beta$")) +
# Format Plot to be Blank
theme_minimal() +
theme(panel.background = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
axis.text.y = element_text(margin = margin(r = -0.25,unit="cm")),
axis.text.x = element_text(margin = margin(t = -0.25,unit="cm")),
legend.position = if(LEGEND) c(0.63,0.8) else "No"
)
TargetPlot
install.packages("ggplot2")
library(ggplot2)
